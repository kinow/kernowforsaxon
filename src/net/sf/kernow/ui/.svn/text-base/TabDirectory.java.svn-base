package net.sf.kernow.ui;

import net.sf.kernow.ui.util.ComboBoxUtil;
import java.io.File;
import java.util.Properties;
import java.util.ResourceBundle;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingWorker;
import javax.xml.transform.Source;
import net.sf.kernow.ui.util.FileComboController;
import net.sf.kernow.util.FileUtil;
import net.sf.kernow.util.PropertyManager;

/**
 *
 * @author  Florent Georges
 */
public class TabDirectory extends JPanel implements Tab {
    
    private TabbedView view;
    private FileComboController input;
    private FileComboController stylesheet;
    private FileComboController output;
    
    private static final int splitPanePos = 220;
    
    private ResourceBundle bundle = ResourceBundle.getBundle("net/sf/kernow/i18n/TabbedView");
           
    /**
     * Creates new form TabDirectory
     */
    public TabDirectory() {
        initComponents();

        // file controllers
        input = new FileComboController(inputCombo, inputButton, true);
        stylesheet = new FileComboController(stylesheetCombo, stylesheetButton, false);
        output = new FileComboController(outputCombo, outputButton, true);
    }

    @Override
    public void init(TabbedView view) {
        this.view = view;
    }

    @Override
    public void insertInto(JTabbedPane pane, int pos) {        
        String name = bundle.getString("Directory");
        String tooltip = bundle.getString("Run_a_stylesheet_against_a_directory");
        pane.insertTab(name, null, this, tooltip, pos);
    }

    @Override
    public void loadProperties(Properties props) {
        input.loadValues(props, "generalSourceXMLCmbBx");
        stylesheet.loadValues(props, "generalXSLTCmbBx");
        output.loadValues(props, "generalOutputFolderCmbBx");
        recurseSubdirs.setSelected(Boolean.parseBoolean(props.getProperty(PropertyManager.DIRECTORY_RECURSE_SUBDIRECTORIES, "false")));
        stopOnError.setSelected(Boolean.parseBoolean(props.getProperty(PropertyManager.DIRECTORY_STOP_ON_ERROR)));
    }
    
    @Override
    public void saveProperties(Properties props) {
        input.saveValues(props, "generalSourceXMLCmbBx");
        stylesheet.saveValues(props, "generalXSLTCmbBx");
        output.saveValues(props, "generalOutputFolderCmbBx");
        props.setProperty(PropertyManager.DIRECTORY_RECURSE_SUBDIRECTORIES, Boolean.toString(recurseSubdirs.isSelected()));
        props.setProperty(PropertyManager.DIRECTORY_STOP_ON_ERROR, Boolean.toString(stopOnError.isSelected()));
    }

    @Override
    public void setRunButtonsEnabled(boolean enable) {
        runButton.setEnabled(enable);
        paramsButton.setEnabled(enable);
        inputButton.setEnabled(enable);
        stylesheetButton.setEnabled(enable);
        outputButton.setEnabled(enable);
    }

    @Override
    public void setAllCaretPositions() {
        ComboBoxUtil.setCaretPosition(inputCombo);
        ComboBoxUtil.setCaretPosition(stylesheetCombo);
        ComboBoxUtil.setCaretPosition(outputCombo);
    }

    @Override
    public int getSplitPanePos() {
        return this.splitPanePos;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        titleSeparator = new javax.swing.JSeparator();
        inputCombo = new javax.swing.JComboBox();
        inputLabel = new javax.swing.JLabel();
        inputButton = new javax.swing.JButton();
        recurseSubdirs = new javax.swing.JCheckBox();
        stylesheetLabel = new javax.swing.JLabel();
        stylesheetCombo = new javax.swing.JComboBox();
        stylesheetButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        outputCombo = new javax.swing.JComboBox();
        outputButton = new javax.swing.JButton();
        stopOnError = new javax.swing.JCheckBox();
        runButton = new javax.swing.JButton();
        paramsButton = new javax.swing.JButton();

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        titleLabel.setText("Directory Transformation");

        inputCombo.setEditable(true);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/TabbedView"); // NOI18N
        inputLabel.setText(bundle.getString("Input_Folder")); // NOI18N

        inputButton.setText("...");

        recurseSubdirs.setText(bundle.getString("Recurse_subdirectories")); // NOI18N
        recurseSubdirs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recurseSubdirs.setMargin(new java.awt.Insets(0, 0, 0, 0));
        recurseSubdirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recurseSubdirsActionPerformed(evt);
            }
        });

        stylesheetLabel.setText(bundle.getString("Stylesheet")); // NOI18N

        stylesheetCombo.setEditable(true);

        stylesheetButton.setText("jButton2");

        outputLabel.setText(bundle.getString("Output_Folder")); // NOI18N

        outputCombo.setEditable(true);

        outputButton.setText("jButton3");

        stopOnError.setText(bundle.getString("Stop_when_an_error_occurs")); // NOI18N
        stopOnError.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        stopOnError.setMargin(new java.awt.Insets(0, 0, 0, 0));
        stopOnError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopOnErrorActionPerformed(evt);
            }
        });

        runButton.setText(bundle.getString("Run")); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        paramsButton.setText(bundle.getString("Params")); // NOI18N
        paramsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputLabel)
                            .addComponent(stylesheetLabel)
                            .addComponent(outputLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(recurseSubdirs)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputCombo, 0, 368, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(stylesheetCombo, 0, 368, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stylesheetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(outputCombo, 0, 368, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stopOnError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192, Short.MAX_VALUE)
                        .addComponent(paramsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLabel)
                    .addComponent(inputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recurseSubdirs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stylesheetLabel)
                    .addComponent(stylesheetCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stylesheetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputLabel)
                    .addComponent(outputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopOnError)
                    .addComponent(runButton)
                    .addComponent(paramsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        final SwingWorker worker = new SwingWorker() {
            @Override
            public Object doInBackground() {
                
                boolean success = false;
                view.clearOutputWindow();
                
                try {
                    // TODO: Use getSelectedFile() and getSelectedSource() instead.
                    // But must adapt the right error handling...  -fg
                    String sourceXMLDir = input.getSelectedString();
                    String stylesheetPath = stylesheet.getSelectedString();
                    String outputDir = output.getSelectedString();
                    
                    if ("".equals(sourceXMLDir)) {
                        System.err.println(bundle.getString("Please_select_a_source_XML_directory"));
                        view.setProgressText(bundle.getString("Error!"));
                    } else if ("".equals(stylesheetPath)) {
                        System.err.println(bundle.getString("Please_select_a_stylesheet"));
                        view.setProgressText(bundle.getString("Error!"));
                    } else if ("".equals(outputDir)) {
                        System.err.println(bundle.getString("Please_select_an_output_directory"));
                        view.setProgressText(bundle.getString("Error!"));
                    } else {
                        view.startDeterminant(bundle.getString("Working..."));
                        File xmlDir = new File(sourceXMLDir);
                        Source style = FileUtil.createSource(stylesheetPath);
                        File outDir = new File(outputDir);
                        success = view.getTransformController().runDirectoryTransform(xmlDir, style, outDir);
                    }
                } catch (Exception ex) {
                    System.err.println(ex.getMessage());
                    view.setProgressText(bundle.getString("Error!"));
                }
                
                view.endDeterminant(success);
                
                return "Run directory transform finished";
            }
        };

        view.executeService(worker);
    }//GEN-LAST:event_runButtonActionPerformed

    private void paramsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramsButtonActionPerformed
        view.getParamsDiag().showParamsForStylesheet(stylesheet.getSelectedString());
    }//GEN-LAST:event_paramsButtonActionPerformed

    private void stopOnErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopOnErrorActionPerformed
        view.getConfig().setDirectoryStopOnAnError(stopOnError.isSelected());
    }//GEN-LAST:event_stopOnErrorActionPerformed

    private void recurseSubdirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recurseSubdirsActionPerformed
        view.getConfig().setDirectoryRecurseSubdirectories(recurseSubdirs.isSelected());
    }//GEN-LAST:event_recurseSubdirsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton inputButton;
    private javax.swing.JComboBox inputCombo;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JButton outputButton;
    private javax.swing.JComboBox outputCombo;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton paramsButton;
    private javax.swing.JCheckBox recurseSubdirs;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox stopOnError;
    private javax.swing.JButton stylesheetButton;
    private javax.swing.JComboBox stylesheetCombo;
    private javax.swing.JLabel stylesheetLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JSeparator titleSeparator;
    // End of variables declaration//GEN-END:variables
    
}

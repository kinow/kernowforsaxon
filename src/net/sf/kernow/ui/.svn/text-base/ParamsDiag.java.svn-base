/*
 * Params.java
 *
 * Created on 06 November 2005, 16:39
 */

package net.sf.kernow.ui;

import java.awt.Color;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import net.sf.kernow.Message;
import net.sf.kernow.transform.Params;
import net.sf.kernow.util.AntPropertiesExtractor;
import net.sf.kernow.util.FileUtil;
import net.sf.kernow.util.ParameterExtractor;

/**
 *
 * @author  AWelch
 */
public class ParamsDiag extends javax.swing.JFrame {
    
    private URI stylesheetURI;
    private HashMap<String, Object> params;
    
    private boolean isStylesheet;  
    
    /** Creates new form Params */
    public ParamsDiag() {     
        // Set the opening location of the window
        super.setLocation(50, 50);        
        initComponents();
        
        // set the dialog icon
        this.setIconImage(Toolkit.getDefaultToolkit().
                getImage(this.getClass().getClassLoader().getResource("icons/Kernow-Icon.gif")));
    }
        
    
    /**
     * Displays the params dialog populated with the parameters
     * for the given stylesheet
     */
    void showParamsForStylesheet(String stylesheetPath) {
        try {
            
            if (stylesheetPath != null && !stylesheetPath.equals("")) {
                isStylesheet = true;
                setupDiagForParams();

                this.stylesheetURI = FileUtil.createURI(stylesheetPath);
                this.params = Params.getParamsForStylesheet(stylesheetURI);

                populateTable();
                populateStylesheetName(stylesheetPath);
                setVisible(true);            
            } else {
                Message.error("*** No stylesheet is selected - Please selected a stylesheet before pressing the Params button");
            }
        } catch (URISyntaxException ex) {
             Message.error("The stylesheet path cannot be converted to a URI");
        }
    }    
    
    void showPropertiesForBuildfile(String buildfile) {
        isStylesheet = false;
        setupDiagForProperties();
        
        try {
            
            this.stylesheetURI = FileUtil.createURI(buildfile);
            this.params = Params.getParamsForStylesheet(stylesheetURI);
            
            populateTable();
            populateStylesheetName(buildfile);
            setVisible(true);        
        } catch (URISyntaxException ex) {
            Message.error("The buildfile path cannot be converted to a URI");
        }        
    }
    
    private void setupDiagForParams() {
        setDiagTitle(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Transform_Parameters"));
        setTitle(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Parameters"));
        addParamBtn.setText(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Add_Param"));
        deleteParamBtn.setText(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Delete_Param"));
    }
    
    private void setupDiagForProperties() {
        setDiagTitle(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Batch_Properties"));
        setTitle(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Properties"));
        addParamBtn.setText(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Add_Property"));
        deleteParamBtn.setText(java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag").getString("Delete_Property"));
    }
    
    void populateStylesheetName(String s) {
        try {            
            File f = new File(s);
            stylesheetNameLbl.setText(f.getName());
        } catch (Exception e) {
            System.out.println(e.toString());
        }

    }
    
    void setDiagTitle(String s) {
       paramsDiagTitleLbl.setText(s); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        paramTable = new javax.swing.JTable();
        autoPopulateBtn = new javax.swing.JButton();
        addParamBtn = new javax.swing.JButton();
        deleteParamBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        paramsDiagTitleLbl = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        stylesheetNameLbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/ParamsDiag"); // NOI18N
        setTitle(bundle.getString("Parameters")); // NOI18N

        paramTable.setFont(new java.awt.Font("Arial", 0, 12));
        paramTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Value"
            }
        ));
        paramTable.setFillsViewportHeight(true);
        paramTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        paramTable.setRowHeight(20);
        paramTable.setRowSelectionAllowed(false);
        paramTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                paramTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(paramTable);

        autoPopulateBtn.setText(bundle.getString("Auto_Populate")); // NOI18N
        autoPopulateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPopulateBtnActionPerformed(evt);
            }
        });

        addParamBtn.setText(bundle.getString("Add_Param")); // NOI18N
        addParamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParamBtnActionPerformed(evt);
            }
        });

        deleteParamBtn.setText(bundle.getString("Delete_Param")); // NOI18N
        deleteParamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteParamBtnActionPerformed(evt);
            }
        });

        closeBtn.setText(bundle.getString("Close")); // NOI18N
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        paramsDiagTitleLbl.setFont(new java.awt.Font("Arial", 1, 12));
        paramsDiagTitleLbl.setText(bundle.getString("Transform_Parameters")); // NOI18N

        stylesheetNameLbl.setText(bundle.getString("Stylesheet")); // NOI18N

        jLabel2.setText(bundle.getString("ParamsDiag.jLabel2.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(autoPopulateBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 110, Short.MAX_VALUE)
                        .add(addParamBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteParamBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(closeBtn))
                    .add(layout.createSequentialGroup()
                        .add(paramsDiagTitleLbl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stylesheetNameLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(paramsDiagTitleLbl)
                    .add(jLabel2)
                    .add(stylesheetNameLbl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(closeBtn)
                    .add(deleteParamBtn)
                    .add(autoPopulateBtn)
                    .add(addParamBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        
        saveParams();
        
        setVisible(false);
    }//GEN-LAST:event_closeBtnActionPerformed

    private void autoPopulateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPopulateBtnActionPerformed
        if (isStylesheet) { 
            params = ParameterExtractor.getParametersForStylesheet(stylesheetURI);
        } else {
            params = AntPropertiesExtractor.getAntProperties(stylesheetURI);
        }
        populateTable();
    }//GEN-LAST:event_autoPopulateBtnActionPerformed

    private void populateTable() {
        // Remove all the existing values
        DefaultTableModel model = (DefaultTableModel)paramTable.getModel();
        while (paramTable.getRowCount() > 0) {
            model.removeRow(paramTable.getRowCount()-1);
        }
        
        // sort the values
        Vector<String> v = new Vector<String>(params.keySet());
        Collections.sort(v);
        
        // Populate the table with the new values
        for (String paramName : v) {
            String value = (String) params.get(paramName);
            model.addRow(new Object[]{paramName, value});            
        }
    }
    
    private void removeRow() {
        
        // Only allow removal if the user is not currently editing a cell
        if (!paramTable.isEditing()) {
            
            // Get the currently selected row
            int index = paramTable.getSelectedRow();
        
            // If no row is selected, select the last row
            if (index == -1) {
                index = paramTable.getRowCount() - 1;
            }

            // If there is a row to delete, remove it
            if (index >= 0) {
                ((DefaultTableModel)paramTable.getModel()).removeRow(index);
            }     
        }
    }
    
    private void saveParams() {
        HashMap<String, Object> newParams = new HashMap<String, Object>();
        
        for (int i = 0; i < paramTable.getRowCount(); i++) {
            newParams.put((String)paramTable.getValueAt(i, 0), paramTable.getValueAt(i, 1));
        }
        
        Params.setParamsForStylesheet(stylesheetURI, newParams);
    }
    private void deleteParamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteParamBtnActionPerformed
        removeRow();
    }//GEN-LAST:event_deleteParamBtnActionPerformed

    private void addParamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParamBtnActionPerformed
       ((DefaultTableModel)paramTable.getModel()).addRow(new Object[]{"", ""});
    }//GEN-LAST:event_addParamBtnActionPerformed

    private void paramTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_paramTablePropertyChange
        saveParams();
    }//GEN-LAST:event_paramTablePropertyChange
    
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Params().setVisible(true);
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParamBtn;
    private javax.swing.JButton autoPopulateBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton deleteParamBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable paramTable;
    private javax.swing.JLabel paramsDiagTitleLbl;
    private javax.swing.JLabel stylesheetNameLbl;
    // End of variables declaration//GEN-END:variables
    
}

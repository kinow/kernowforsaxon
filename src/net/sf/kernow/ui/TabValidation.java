package net.sf.kernow.ui;

import java.io.File;
import java.util.Properties;
import java.util.ResourceBundle;
import javax.swing.JTabbedPane;
import javax.swing.SwingWorker;
import javax.xml.transform.Source;
import net.sf.kernow.ui.util.FileComboController;

/**
 *
 * @author  Florent Georges
 */
public class TabValidation extends javax.swing.JPanel implements Tab {

    private TabbedView view;
    private FileComboController input;
    private FileComboController schema;    
    
    private final int splitPanePos = 220;
    
    private ResourceBundle bundle = ResourceBundle.getBundle("net/sf/kernow/i18n/TabbedView");
    
    public TabValidation() {
        initComponents();

        // file controllers
        input = new FileComboController(inputCombo, inputButton, isDirectory);
        schema = new FileComboController(schemaCombo, schemaButton, false);
    }

    @Override
    public void setAllCaretPositions() {
    // empty
    }

    @Override
    public void init(TabbedView view) {
        this.view = view;
    }

    @Override
    public void insertInto(JTabbedPane pane, int pos) {
        String name = bundle.getString("Validation");
        String tooltip = bundle.getString("Validate_XML_document_or_directory_against_an_XML_Schema,_and_check_schema_validity");
        pane.insertTab(name, null, this, tooltip, pos);
    }

    @Override
    public void loadProperties(Properties props) {
        if (props.getProperty("schemaCmbBx_item0") != null && !"".equals(props.getProperty("schemaCmbBx_item0"))) {
            schema.loadValues(props, "schemaCmbBx");
        } else {
            // Add some default schemas if none have been saved
            schemaCombo.addItem("http://www.w3.org/2002/08/xhtml/xhtml1-transitional.xsd");
            schemaCombo.addItem("http://www.w3.org/2002/08/xhtml/xhtml1-strict.xsd");
        }
        input.loadValues(props, "schemaXMLFileCmbBx");
        isDirectory.setSelected(Boolean.parseBoolean(props.getProperty("schemaInputIsDirectoryChkBx")));
        recurseSubdirs.setSelected(Boolean.parseBoolean(props.getProperty("schemaRecurseSubdirectoriesChkBx")));
        errorOnly.setSelected(Boolean.parseBoolean(props.getProperty("schemaReportFailuresOnlyChkBx")));
    }

    @Override
    public void saveProperties(Properties props) {
        schema.saveValues(props, "schemaCmbBx");
        input.saveValues(props, "schemaXMLFileCmbBx");
        props.setProperty("schemaInputIsDirectoryChkBx", Boolean.toString(isDirectory.isSelected()));
        props.setProperty("schemaRecurseSubdirectoriesChkBx", Boolean.toString(recurseSubdirs.isSelected()));
        props.setProperty("schemaReportFailuresOnlyChkBx", Boolean.toString(errorOnly.isSelected()));
    }

    @Override
    public void setRunButtonsEnabled(boolean enable) {
        validateButton.setEnabled(enable);
        checkButton.setEnabled(enable);
        recurseSubdirs.setEnabled(enable);
        errorOnly.setEnabled(enable);
        isDirectory.setEnabled(enable);
    }
    
    @Override
    public int getSplitPanePos() {
        return splitPanePos;
    }    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        titleSeparator = new javax.swing.JSeparator();
        inputLabel = new javax.swing.JLabel();
        inputCombo = new javax.swing.JComboBox();
        inputButton = new javax.swing.JButton();
        isDirectory = new javax.swing.JCheckBox();
        recurseSubdirs = new javax.swing.JCheckBox();
        schemaLabel = new javax.swing.JLabel();
        schemaCombo = new javax.swing.JComboBox();
        schemaButton = new javax.swing.JButton();
        errorOnly = new javax.swing.JCheckBox();
        validateButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/TabbedView"); // NOI18N
        titleLabel.setText(bundle.getString("XML_Schema_Validation")); // NOI18N

        inputLabel.setText(bundle.getString("XML_File_/_Dir")); // NOI18N

        inputCombo.setEditable(true);

        inputButton.setText("...");

        isDirectory.setText(bundle.getString("Input_is_a_directory")); // NOI18N
        isDirectory.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        isDirectory.setMargin(new java.awt.Insets(0, 0, 0, 0));
        isDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isDirectoryActionPerformed(evt);
            }
        });

        recurseSubdirs.setText(bundle.getString("Recurse_subdirectories")); // NOI18N
        recurseSubdirs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        recurseSubdirs.setMargin(new java.awt.Insets(0, 0, 0, 0));
        recurseSubdirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recurseSubdirsActionPerformed(evt);
            }
        });

        schemaLabel.setText(bundle.getString("XML_Schema")); // NOI18N

        schemaCombo.setEditable(true);

        schemaButton.setText("...");

        errorOnly.setText(bundle.getString("Report_failures_only")); // NOI18N
        errorOnly.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        errorOnly.setMargin(new java.awt.Insets(0, 0, 0, 0));
        errorOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorOnlyActionPerformed(evt);
            }
        });

        validateButton.setText(bundle.getString("Validate")); // NOI18N
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        checkButton.setText(bundle.getString("Check_Schema")); // NOI18N
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputLabel)
                            .addComponent(schemaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isDirectory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recurseSubdirs))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputCombo, 0, 381, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(schemaCombo, 0, 381, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(schemaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorOnly)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                        .addComponent(checkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(validateButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLabel)
                    .addComponent(inputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isDirectory)
                    .addComponent(recurseSubdirs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schemaLabel)
                    .addComponent(schemaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schemaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(errorOnly)
                    .addComponent(validateButton)
                    .addComponent(checkButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void isDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isDirectoryActionPerformed
        recurseSubdirs.setEnabled(isDirectory.isSelected());
    }//GEN-LAST:event_isDirectoryActionPerformed

    private void recurseSubdirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recurseSubdirsActionPerformed
        view.getConfig().setSchemaRecurseSubdirectories(recurseSubdirs.isSelected());
    }//GEN-LAST:event_recurseSubdirsActionPerformed

    private void errorOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorOnlyActionPerformed
        view.getConfig().setSchemaReportFailuresOnly(errorOnly.isSelected());
    }//GEN-LAST:event_errorOnlyActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        view.clearOutputWindow();
        if (schema.getSelectedString() == null) {
            System.out.println(bundle.getString("Please_select_an_XML_Schema_/_Relax_NG_schema_to_check"));
            return;
        }

        final SwingWorker worker = new SwingWorker() {

                    @Override
            public Object doInBackground() {

                        view.startIndeterminant(bundle.getString("Working..."));

                        boolean success = false;
                        try {
                            Source src = schema.getSelectedSource();
                            success = view.getTransformController().runSchemaCheck(src);
                        } catch (Exception ex) {
                            // TODO: Better error reporting. -fg
                            System.out.println(ex.toString());
                        }

                        view.endIndeterminant(success);

                        return "Run schema check finished";
                    }
                };

        view.executeService(worker);
    }//GEN-LAST:event_checkButtonActionPerformed

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        view.clearOutputWindow();
        if (input.getSelectedString() == null) {
            System.out.println(bundle.getString("Please_select_an_XML_file_or_directory_to_validate"));
            return;
        } else if (schema.getSelectedString() == null) {
            System.out.println(bundle.getString("Please_select_a_schema_to_validate_the_XML_file_against"));
            return;
        }

        final SwingWorker worker = new SwingWorker() {

                    @Override
            public Object doInBackground() {
                        view.startDeterminant(bundle.getString("Starting_directory_validate..."));

                        boolean success = false;

                        try {
                            Source src = schema.getSelectedSource();
                            if (isDirectory.isSelected()) {
                                File dir = input.getSelectedFile();
                                success = view.getTransformController().runDirectoryValidate(dir, src);
                            } else {
                                Source doc = input.getSelectedSource();
                                success = view.getTransformController().runValidate(doc, src);
                            }
                        } catch (Exception e) {
                            System.out.println(e.toString());
                        }

                        view.endDeterminant(success);

                        return "Run directory validate finished";
                    }
                };

        view.executeService(worker);
    }//GEN-LAST:event_validateButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JCheckBox errorOnly;
    private javax.swing.JButton inputButton;
    private javax.swing.JComboBox inputCombo;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JCheckBox isDirectory;
    private javax.swing.JCheckBox recurseSubdirs;
    private javax.swing.JButton schemaButton;
    private javax.swing.JComboBox schemaCombo;
    private javax.swing.JLabel schemaLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JSeparator titleSeparator;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables

}

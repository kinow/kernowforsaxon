/*
 * Options.java
 *
 * Created on 30th November 2005
 */

package net.sf.kernow.ui;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.io.File;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import net.sf.kernow.Config;
import net.sf.kernow.schema.SchemaVersion;
import net.sf.kernow.util.BrowserLauncher;


/**
 *
 * @author  AWelch
 */
public class Options extends javax.swing.JFrame {
        
    Config config;
       
    private ResourceBundle bundle = ResourceBundle.getBundle("net/sf/kernow/i18n/Options");
    
    /** Creates new form Options */
    public Options() {        
        this.config = Config.getConfig();
        
        // Set the opening location of the window
        super.setLocation(50, 50);
        initComponents();
        
        // Need to set the titles here to allow them to be i18n'd
        // (for some reason the wizard won't update the autogenerated code in this class)
        optionsTabbedPane.setTitleAt(0, bundle.getString("General"));
        optionsTabbedPane.setTitleAt(1, bundle.getString("Tabs"));        
        optionsTabbedPane.setTitleAt(2, bundle.getString("Resolvers"));
        optionsTabbedPane.setTitleAt(3, bundle.getString("Validation"));
        optionsTabbedPane.setTitleAt(4, bundle.getString("Multithreading"));
        optionsTabbedPane.setTitleAt(5, bundle.getString("Performance_Testing"));
        
        // set the dialog icon
        this.setIconImage(Toolkit.getDefaultToolkit().
                getImage(this.getClass().getClassLoader().getResource("icons/Kernow-Icon.gif")));
        
        optionsMTSpinner.setModel(new SpinnerNumberModel(1, 1, 100, 1));
        repeatTransformSpinner.setModel(new SpinnerNumberModel(1, 1, 1000, 1));
        ignoreTimesSpinner.setModel(new SpinnerNumberModel(1, 1, 10, 1));
        
        validationButtonGroup.add(validationSaxonRadioButton);
        validationButtonGroup.add(validationXercesRadioButton);
        
        schemaVersionButtonGroup.add(validationXSD1dot0RadioBttn);
        schemaVersionButtonGroup.add(validationXSD1dot1RadioBttn);
        
        enableTextFields();
       
        loadOptionsFromConfig();
        
        if (config.isSchemaAwareEnabled()) {
            validationSaxonRadioButton.setEnabled(true);  
            validationSaxonRadioButton.setSelected(true);
        }  
        
        MouseListener mouseListener = new MouseListener(this, Cursor.HAND_CURSOR);
        lexevWebsiteLbl.addMouseMotionListener(mouseListener);
        
        MouseListener generalMouseListener = new MouseListener(this, Cursor.DEFAULT_CURSOR);
        super.addMouseMotionListener(generalMouseListener);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        schemaAwareValidationButtonGroup = new javax.swing.ButtonGroup();
        validationButtonGroup = new javax.swing.ButtonGroup();
        schemaVersionButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        doneBtn = new javax.swing.JButton();
        optionsTabbedPane = new javax.swing.JTabbedPane();
        optionsGeneralPanel = new javax.swing.JPanel();
        cleanOutputFilesChkBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        allowedInputSuffixes = new javax.swing.JTextField();
        useThisSuffixChkBox = new javax.swing.JCheckBox();
        useThisSuffixTextField = new javax.swing.JTextField();
        optionsTabsPanel = new javax.swing.JPanel();
        tabsSingleFileChkBx = new javax.swing.JCheckBox();
        tabsStandaloneChkBx = new javax.swing.JCheckBox();
        tabsDirectoryChkBx = new javax.swing.JCheckBox();
        tabsXSLTSandboxChkBx = new javax.swing.JCheckBox();
        tabsXSDSandboxChkBx = new javax.swing.JCheckBox();
        tabsXQuerySandboxChkBx = new javax.swing.JCheckBox();
        tabsValidationChkBx = new javax.swing.JCheckBox();
        tabsSchematronChkBx = new javax.swing.JCheckBox();
        tabsBatchChkBx = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        optionsResolversPanel = new javax.swing.JPanel();
        useCachingURIResolverChkBx = new javax.swing.JCheckBox();
        useCachingEntityResolverChkBx = new javax.swing.JCheckBox();
        suppressCachingMessages = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        localCacheTxtFld = new javax.swing.JTextField();
        localCacheFileChooserBttn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        catalogTxtFld = new javax.swing.JTextField();
        catalogFileChooserBttn = new javax.swing.JButton();
        optionsValidationPanel = new javax.swing.JPanel();
        validationSaxonRadioButton = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        validationXercesRadioButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        validationXSD1dot0RadioBttn = new javax.swing.JRadioButton();
        validationXSD1dot1RadioBttn = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        optionsMultithreadedPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        optionsMTSpinner = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        optionsPerformance = new javax.swing.JPanel();
        performAvgTimingChkBx = new javax.swing.JCheckBox();
        repeatTransformSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ignoreTimesSpinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        lexevPanel = new javax.swing.JPanel();
        lexevEnableChkBx = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        lexevCdataChkBk = new javax.swing.JCheckBox();
        lexevEntityRefChkBx = new javax.swing.JCheckBox();
        lexevDoctypeChkBx = new javax.swing.JCheckBox();
        lexevCommentsChkBx = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        lexevWebsiteLbl = new javax.swing.JLabel();
        lexevDTDEntities = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("net/sf/kernow/i18n/Options"); // NOI18N
        setTitle(bundle.getString("Kernow_Options")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Options.jPanel1.border.title"))); // NOI18N

        doneBtn.setText(bundle.getString("Done")); // NOI18N
        doneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneBtnActionPerformed(evt);
            }
        });

        cleanOutputFilesChkBox.setText(bundle.getString("Clean_output_files_before_transforms")); // NOI18N
        cleanOutputFilesChkBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cleanOutputFilesChkBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cleanOutputFilesChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanOutputFilesChkBoxActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("Allowed_input_suffixes_for_directory_operations:")); // NOI18N

        allowedInputSuffixes.setText(bundle.getString("Options.allowedInputSuffixes.text")); // NOI18N

        useThisSuffixChkBox.setText(bundle.getString("Use_this_suffix_for_directory_transform_output_files")); // NOI18N
        useThisSuffixChkBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useThisSuffixChkBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        useThisSuffixChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useThisSuffixChkBoxActionPerformed(evt);
            }
        });

        useThisSuffixTextField.setText(bundle.getString("Options.useThisSuffixTextField.text")); // NOI18N
        useThisSuffixTextField.setEnabled(false);
        useThisSuffixTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useThisSuffixTextFieldActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout optionsGeneralPanelLayout = new org.jdesktop.layout.GroupLayout(optionsGeneralPanel);
        optionsGeneralPanel.setLayout(optionsGeneralPanelLayout);
        optionsGeneralPanelLayout.setHorizontalGroup(
            optionsGeneralPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsGeneralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(cleanOutputFilesChkBox)
                .addContainerGap(176, Short.MAX_VALUE))
            .add(optionsGeneralPanelLayout.createSequentialGroup()
                .add(28, 28, 28)
                .add(allowedInputSuffixes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
            .add(optionsGeneralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addContainerGap(105, Short.MAX_VALUE))
            .add(optionsGeneralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsGeneralPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsGeneralPanelLayout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(useThisSuffixTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(optionsGeneralPanelLayout.createSequentialGroup()
                        .add(useThisSuffixChkBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .add(195, 195, 195))))
        );
        optionsGeneralPanelLayout.setVerticalGroup(
            optionsGeneralPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsGeneralPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(cleanOutputFilesChkBox)
                .add(18, 18, 18)
                .add(jLabel1)
                .add(4, 4, 4)
                .add(allowedInputSuffixes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(useThisSuffixChkBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(useThisSuffixTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        optionsTabbedPane.addTab(bundle.getString("Options.optionsGeneralPanel.TabConstraints.tabTitle"), optionsGeneralPanel); // NOI18N

        tabsSingleFileChkBx.setText(bundle.getString("Single_File")); // NOI18N
        tabsSingleFileChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsSingleFileChkBxActionPerformed(evt);
            }
        });

        tabsStandaloneChkBx.setText(bundle.getString("Standalone")); // NOI18N
        tabsStandaloneChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsStandaloneChkBxActionPerformed(evt);
            }
        });

        tabsDirectoryChkBx.setText(bundle.getString("Directory")); // NOI18N
        tabsDirectoryChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsDirectoryChkBxActionPerformed(evt);
            }
        });

        tabsXSLTSandboxChkBx.setText(bundle.getString("XSLT_Sandbox")); // NOI18N
        tabsXSLTSandboxChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsXSLTSandboxChkBxActionPerformed(evt);
            }
        });

        tabsXSDSandboxChkBx.setText(bundle.getString("XSD_Sandbox")); // NOI18N
        tabsXSDSandboxChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsXSDSandboxChkBxActionPerformed(evt);
            }
        });

        tabsXQuerySandboxChkBx.setText(bundle.getString("XQuery_Sandbox")); // NOI18N
        tabsXQuerySandboxChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsXQuerySandboxChkBxActionPerformed(evt);
            }
        });

        tabsValidationChkBx.setText(bundle.getString("Validation")); // NOI18N
        tabsValidationChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsValidationChkBxActionPerformed(evt);
            }
        });

        tabsSchematronChkBx.setText(bundle.getString("Schematron")); // NOI18N
        tabsSchematronChkBx.setEnabled(false);
        tabsSchematronChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsSchematronChkBxActionPerformed(evt);
            }
        });

        tabsBatchChkBx.setText(bundle.getString("Batch")); // NOI18N
        tabsBatchChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabsBatchChkBxActionPerformed(evt);
            }
        });

        jLabel6.setText(bundle.getString("Select_which_tabs_are_visible:")); // NOI18N

        jLabel13.setText(bundle.getString("Changing_which_tabs_are_visible_will_only_take_effect_after_restarting_Kernow")); // NOI18N

        org.jdesktop.layout.GroupLayout optionsTabsPanelLayout = new org.jdesktop.layout.GroupLayout(optionsTabsPanel);
        optionsTabsPanel.setLayout(optionsTabsPanelLayout);
        optionsTabsPanelLayout.setHorizontalGroup(
            optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsTabsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsTabsPanelLayout.createSequentialGroup()
                        .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tabsSingleFileChkBx)
                            .add(tabsDirectoryChkBx)
                            .add(tabsStandaloneChkBx))
                        .add(26, 26, 26)
                        .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tabsXSLTSandboxChkBx)
                            .add(tabsXSDSandboxChkBx)
                            .add(tabsXQuerySandboxChkBx))
                        .add(23, 23, 23)
                        .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tabsSchematronChkBx)
                            .add(tabsValidationChkBx)))
                    .add(tabsBatchChkBx)
                    .add(jLabel6)
                    .add(jLabel13))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        optionsTabsPanelLayout.setVerticalGroup(
            optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsTabsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel6)
                .add(9, 9, 9)
                .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tabsSingleFileChkBx)
                    .add(tabsXSLTSandboxChkBx)
                    .add(tabsValidationChkBx))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tabsStandaloneChkBx)
                    .add(tabsXSDSandboxChkBx)
                    .add(tabsSchematronChkBx))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsTabsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tabsDirectoryChkBx)
                    .add(tabsXQuerySandboxChkBx))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabsBatchChkBx)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 44, Short.MAX_VALUE)
                .add(jLabel13)
                .addContainerGap())
        );

        optionsTabbedPane.addTab(bundle.getString("Options.optionsTabsPanel.TabConstraints.tabTitle"), optionsTabsPanel); // NOI18N

        useCachingURIResolverChkBx.setSelected(true);
        useCachingURIResolverChkBx.setText(bundle.getString("Use_caching_URIResolver")); // NOI18N
        useCachingURIResolverChkBx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useCachingURIResolverChkBx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        useCachingURIResolverChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCachingURIResolverChkBxActionPerformed(evt);
            }
        });

        useCachingEntityResolverChkBx.setSelected(true);
        useCachingEntityResolverChkBx.setText(bundle.getString("Use_caching_EntityResolver")); // NOI18N
        useCachingEntityResolverChkBx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useCachingEntityResolverChkBx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        useCachingEntityResolverChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCachingEntityResolverChkBxActionPerformed(evt);
            }
        });

        suppressCachingMessages.setText(bundle.getString("Suppress_caching_messages")); // NOI18N
        suppressCachingMessages.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        suppressCachingMessages.setMargin(new java.awt.Insets(0, 0, 0, 0));
        suppressCachingMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppressCachingMessagesActionPerformed(evt);
            }
        });

        jLabel4.setText(bundle.getString("Local_cache")); // NOI18N

        localCacheFileChooserBttn.setText(bundle.getString("Options.localCacheFileChooserBttn.text")); // NOI18N
        localCacheFileChooserBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localCacheFileChooserBttnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel5.setText(bundle.getString("(Resolvers_will_look_in_here_first)")); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel16.setText(bundle.getString("Options.jLabel16.text")); // NOI18N

        jLabel19.setText(bundle.getString("Options.jLabel19.text")); // NOI18N

        catalogTxtFld.setText(bundle.getString("Options.catalogTxtFld.text")); // NOI18N
        catalogTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catalogTxtFldActionPerformed(evt);
            }
        });

        catalogFileChooserBttn.setText(bundle.getString("Options.catalogFileChooserBttn.text")); // NOI18N
        catalogFileChooserBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catalogFileChooserBttnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout optionsResolversPanelLayout = new org.jdesktop.layout.GroupLayout(optionsResolversPanel);
        optionsResolversPanel.setLayout(optionsResolversPanelLayout);
        optionsResolversPanelLayout.setHorizontalGroup(
            optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsResolversPanelLayout.createSequentialGroup()
                .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsResolversPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(optionsResolversPanelLayout.createSequentialGroup()
                                .add(useCachingURIResolverChkBx)
                                .add(18, 18, 18)
                                .add(useCachingEntityResolverChkBx))
                            .add(suppressCachingMessages)
                            .add(optionsResolversPanelLayout.createSequentialGroup()
                                .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel19)
                                    .add(jLabel4))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, optionsResolversPanelLayout.createSequentialGroup()
                                        .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(catalogTxtFld, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, localCacheTxtFld, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(localCacheFileChooserBttn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(catalogFileChooserBttn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, optionsResolversPanelLayout.createSequentialGroup()
                        .add(86, 86, 86)
                        .add(jLabel16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        optionsResolversPanelLayout.setVerticalGroup(
            optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsResolversPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(useCachingURIResolverChkBx)
                    .add(useCachingEntityResolverChkBx))
                .add(18, 18, 18)
                .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(catalogTxtFld, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(catalogFileChooserBttn))
                .add(16, 16, 16)
                .add(optionsResolversPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(localCacheTxtFld, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(localCacheFileChooserBttn))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel16)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 23, Short.MAX_VALUE)
                .add(suppressCachingMessages)
                .addContainerGap())
        );

        optionsTabbedPane.addTab(bundle.getString("Options.optionsResolversPanel.TabConstraints.tabTitle"), optionsResolversPanel); // NOI18N

        validationSaxonRadioButton.setText(bundle.getString("Saxon")); // NOI18N
        validationSaxonRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        validationSaxonRadioButton.setEnabled(false);
        validationSaxonRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        validationSaxonRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validationSaxonRadioButtonActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("Use_this_XML_Schema_processor_(for_the_Validation_tab):")); // NOI18N

        validationXercesRadioButton.setText(bundle.getString("Xerces")); // NOI18N
        validationXercesRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        validationXercesRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        validationXercesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validationXercesRadioButtonActionPerformed(evt);
            }
        });

        jLabel3.setText(bundle.getString("(Saxon_is_only_available_when_Saxon-SA_is_detected)")); // NOI18N

        validationXSD1dot0RadioBttn.setText(bundle.getString("Options.validationXSD1dot0RadioBttn.text")); // NOI18N
        validationXSD1dot0RadioBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validationXSD1dot0RadioBttnActionPerformed(evt);
            }
        });

        validationXSD1dot1RadioBttn.setText(bundle.getString("Options.validationXSD1dot1RadioBttn.text")); // NOI18N
        validationXSD1dot1RadioBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validationXSD1dot1RadioBttnActionPerformed(evt);
            }
        });

        jLabel17.setText(bundle.getString("Options.jLabel17.text")); // NOI18N

        jLabel18.setText(bundle.getString("Options.jLabel18.text")); // NOI18N

        org.jdesktop.layout.GroupLayout optionsValidationPanelLayout = new org.jdesktop.layout.GroupLayout(optionsValidationPanel);
        optionsValidationPanel.setLayout(optionsValidationPanelLayout);
        optionsValidationPanelLayout.setHorizontalGroup(
            optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsValidationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsValidationPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(optionsValidationPanelLayout.createSequentialGroup()
                                .add(jLabel17)
                                .add(51, 51, 51))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, optionsValidationPanelLayout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(validationSaxonRadioButton)
                                    .add(validationXercesRadioButton))))
                        .add(5, 5, 5)
                        .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel18)
                            .add(optionsValidationPanelLayout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(validationXSD1dot0RadioBttn)
                                    .add(validationXSD1dot1RadioBttn)))))
                    .add(jLabel2)
                    .add(jLabel3))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        optionsValidationPanelLayout.setVerticalGroup(
            optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsValidationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(6, 6, 6)
                .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(jLabel18))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(validationSaxonRadioButton)
                    .add(validationXSD1dot0RadioBttn))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsValidationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(validationXercesRadioButton)
                    .add(validationXSD1dot1RadioBttn))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 77, Short.MAX_VALUE)
                .add(jLabel3)
                .addContainerGap())
        );

        optionsTabbedPane.addTab(bundle.getString("Validation"), optionsValidationPanel); // NOI18N

        jLabel7.setText(bundle.getString("Size_of_thread_pool:_")); // NOI18N

        jLabel8.setText(bundle.getString("Set_the_number_of_threads_to_use_for_directory_transforms.")); // NOI18N

        optionsMTSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optionsMTSpinnerStateChanged(evt);
            }
        });

        jLabel15.setText(bundle.getString("Options.jLabel15.text")); // NOI18N

        org.jdesktop.layout.GroupLayout optionsMultithreadedPanelLayout = new org.jdesktop.layout.GroupLayout(optionsMultithreadedPanel);
        optionsMultithreadedPanel.setLayout(optionsMultithreadedPanelLayout);
        optionsMultithreadedPanelLayout.setHorizontalGroup(
            optionsMultithreadedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsMultithreadedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsMultithreadedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(optionsMultithreadedPanelLayout.createSequentialGroup()
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(optionsMTSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel8)
                    .add(jLabel15))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        optionsMultithreadedPanelLayout.setVerticalGroup(
            optionsMultithreadedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsMultithreadedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .add(16, 16, 16)
                .add(optionsMultithreadedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(optionsMTSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel15)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        optionsTabbedPane.addTab(bundle.getString("Multithreading"), optionsMultithreadedPanel); // NOI18N

        performAvgTimingChkBx.setText(bundle.getString("Perform_Average_Timing")); // NOI18N
        performAvgTimingChkBx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        performAvgTimingChkBx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        performAvgTimingChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performAvgTimingChkBxActionPerformed(evt);
            }
        });

        repeatTransformSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                repeatTransformSpinnerStateChanged(evt);
            }
        });

        jLabel9.setText(bundle.getString("Number_of_times_to_repeat_transform")); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel10.setText(bundle.getString("Single_File_and_Standalone_transforms_only")); // NOI18N

        jLabel11.setText(bundle.getString("Ignore_the_first")); // NOI18N

        ignoreTimesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ignoreTimesSpinnerStateChanged(evt);
            }
        });

        jLabel12.setText(bundle.getString("times")); // NOI18N

        org.jdesktop.layout.GroupLayout optionsPerformanceLayout = new org.jdesktop.layout.GroupLayout(optionsPerformance);
        optionsPerformance.setLayout(optionsPerformanceLayout);
        optionsPerformanceLayout.setHorizontalGroup(
            optionsPerformanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPerformanceLayout.createSequentialGroup()
                .addContainerGap()
                .add(optionsPerformanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(performAvgTimingChkBx)
                    .add(jLabel10)
                    .add(optionsPerformanceLayout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(repeatTransformSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(optionsPerformanceLayout.createSequentialGroup()
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ignoreTimesSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel12)))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        optionsPerformanceLayout.setVerticalGroup(
            optionsPerformanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPerformanceLayout.createSequentialGroup()
                .addContainerGap()
                .add(performAvgTimingChkBx)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsPerformanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(repeatTransformSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(optionsPerformanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(jLabel12)
                    .add(ignoreTimesSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 92, Short.MAX_VALUE)
                .add(jLabel10)
                .addContainerGap())
        );

        optionsTabbedPane.addTab(bundle.getString("Performance_Testing"), optionsPerformance); // NOI18N

        lexevEnableChkBx.setText(bundle.getString("Options.lexevEnableChkBx.text")); // NOI18N
        lexevEnableChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexevEnableChkBxActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel14.setText(bundle.getString("Options.jLabel14.text")); // NOI18N

        lexevCdataChkBk.setSelected(true);
        lexevCdataChkBk.setText(bundle.getString("Options.lexevCdataChkBk.text")); // NOI18N
        lexevCdataChkBk.setEnabled(false);
        lexevCdataChkBk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexevCdataChkBkActionPerformed(evt);
            }
        });

        lexevEntityRefChkBx.setSelected(true);
        lexevEntityRefChkBx.setText(bundle.getString("Options.lexevEntityRefChkBx.text")); // NOI18N
        lexevEntityRefChkBx.setEnabled(false);
        lexevEntityRefChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexevEntityRefChkBxActionPerformed(evt);
            }
        });

        lexevDoctypeChkBx.setSelected(true);
        lexevDoctypeChkBx.setText(bundle.getString("Options.lexevDoctypeChkBx.text")); // NOI18N
        lexevDoctypeChkBx.setEnabled(false);
        lexevDoctypeChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexevDoctypeChkBxActionPerformed(evt);
            }
        });

        lexevCommentsChkBx.setSelected(true);
        lexevCommentsChkBx.setText(bundle.getString("Options.lexevCommentsChkBx.text")); // NOI18N
        lexevCommentsChkBx.setEnabled(false);
        lexevCommentsChkBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexevCommentsChkBxActionPerformed(evt);
            }
        });

        lexevWebsiteLbl.setFont(new java.awt.Font("Tahoma", 1, 12));
        lexevWebsiteLbl.setForeground(new java.awt.Color(0, 0, 255));
        lexevWebsiteLbl.setText(bundle.getString("Options.lexevWebsiteLbl.text")); // NOI18N
        lexevWebsiteLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lexevWebsiteLblMouseClicked(evt);
            }
        });

        lexevDTDEntities.setSelected(true);
        lexevDTDEntities.setText(bundle.getString("Options.lexevDTDEntities.text")); // NOI18N
        lexevDTDEntities.setEnabled(false);
        lexevDTDEntities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexevDTDEntitiesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout lexevPanelLayout = new org.jdesktop.layout.GroupLayout(lexevPanel);
        lexevPanel.setLayout(lexevPanelLayout);
        lexevPanelLayout.setHorizontalGroup(
            lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lexevPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lexevCommentsChkBx)
                    .add(lexevPanelLayout.createSequentialGroup()
                        .add(lexevDoctypeChkBx)
                        .add(18, 18, 18)
                        .add(lexevDTDEntities))
                    .add(lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(lexevEntityRefChkBx)
                        .add(lexevPanelLayout.createSequentialGroup()
                            .add(jLabel14)
                            .add(18, 18, 18)
                            .add(lexevEnableChkBx))
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 423, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, lexevPanelLayout.createSequentialGroup()
                            .add(lexevCdataChkBk)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 133, Short.MAX_VALUE)
                            .add(lexevWebsiteLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(34, 34, 34))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        lexevPanelLayout.setVerticalGroup(
            lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lexevPanelLayout.createSequentialGroup()
                .add(13, 13, 13)
                .add(lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(lexevEnableChkBx))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(lexevCdataChkBk)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lexevEntityRefChkBx)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lexevDoctypeChkBx)
                    .add(lexevDTDEntities))
                .add(lexevPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lexevPanelLayout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(lexevWebsiteLbl))
                    .add(lexevPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lexevCommentsChkBx)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        optionsTabbedPane.addTab(bundle.getString("Options.lexevPanel.TabConstraints.tabTitle"), lexevPanel); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(optionsTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .add(doneBtn))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(optionsTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(doneBtn))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ignoreTimesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ignoreTimesSpinnerStateChanged
        config.setNumberOfTasksToIgnore((Integer)ignoreTimesSpinner.getValue());
    }//GEN-LAST:event_ignoreTimesSpinnerStateChanged

    private void repeatTransformSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_repeatTransformSpinnerStateChanged
        config.setNumberOfTimesToRepeatTask((Integer)repeatTransformSpinner.getValue());
    }//GEN-LAST:event_repeatTransformSpinnerStateChanged

    private void performAvgTimingChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performAvgTimingChkBxActionPerformed
         config.setRunRepeatedly(performAvgTimingChkBx.isSelected());
    }//GEN-LAST:event_performAvgTimingChkBxActionPerformed
    
    private void optionsMTSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optionsMTSpinnerStateChanged
         config.setThreadPoolSize((Integer)optionsMTSpinner.getValue());
    }//GEN-LAST:event_optionsMTSpinnerStateChanged

    private void localCacheFileChooserBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localCacheFileChooserBttnActionPerformed
        localCacheTxtFld.setText(openFileChooser(localCacheTxtFld, true));
    }//GEN-LAST:event_localCacheFileChooserBttnActionPerformed

    String openFileChooser(JTextField textField, boolean chooseAFolder) {
        JFileChooser fc = new JFileChooser();
        String path = "";
        String currentDirectory = "";
        
        if (textField != null) {
            currentDirectory = textField.getText();
        }
        
        // Set whether we want to select a folder instead of a file
        if (chooseAFolder) {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
        
        fc.setCurrentDirectory(new File(currentDirectory));
        
        // Show open dialog; this method does not return until the dialog is closed
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            path = fc.getSelectedFile().getAbsolutePath();
        }
        
        if (path == null || path.equals("")) {
            return currentDirectory;
        }
        return path;
    }
        
        
    private void useThisSuffixTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useThisSuffixTextFieldActionPerformed
        config.setSpecificSuffix(useThisSuffixTextField.getText());
    }//GEN-LAST:event_useThisSuffixTextFieldActionPerformed

    private void setValidationEngineToUse() {
        config.setValidationXerces(validationXercesRadioButton.isSelected());
        config.setValidationSaxon(validationSaxonRadioButton.isSelected());
        
        validationXSD1dot0RadioBttn.setEnabled(validationSaxonRadioButton.isSelected());
        validationXSD1dot1RadioBttn.setEnabled(validationSaxonRadioButton.isSelected());
    }
    
    private void validationXercesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validationXercesRadioButtonActionPerformed
        setValidationEngineToUse();        
    }//GEN-LAST:event_validationXercesRadioButtonActionPerformed

    private void validationSaxonRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validationSaxonRadioButtonActionPerformed
        setValidationEngineToUse();
    }//GEN-LAST:event_validationSaxonRadioButtonActionPerformed

    private void useCachingEntityResolverChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCachingEntityResolverChkBxActionPerformed
        config.setUseCachingEntityResolver(useCachingEntityResolverChkBx.isSelected());
    }//GEN-LAST:event_useCachingEntityResolverChkBxActionPerformed

    private void useCachingURIResolverChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCachingURIResolverChkBxActionPerformed
        config.setUseCachingURIResolver(useCachingURIResolverChkBx.isSelected());
    }//GEN-LAST:event_useCachingURIResolverChkBxActionPerformed

    private void cleanOutputFilesChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanOutputFilesChkBoxActionPerformed
        config.setCleanOutputFiles(cleanOutputFilesChkBox.isSelected());
    }//GEN-LAST:event_cleanOutputFilesChkBoxActionPerformed

    private void suppressCachingMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppressCachingMessagesActionPerformed
        config.setSuppressURIandEntityMessages(suppressCachingMessages.isSelected());
    }//GEN-LAST:event_suppressCachingMessagesActionPerformed
            
    // Ensures the state of all text fields match their corresponding check box status
    public void enableTextFields() {
        useThisSuffixTextField.setEnabled(useThisSuffixChkBox.isSelected());
    }
    
    private void useThisSuffixChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useThisSuffixChkBoxActionPerformed
        config.setUseSpecificSuffix(useThisSuffixChkBox.isSelected());
        useThisSuffixTextField.setEnabled(useThisSuffixChkBox.isSelected());
        config.setSpecificSuffix(useThisSuffixTextField.getText());
    }//GEN-LAST:event_useThisSuffixChkBoxActionPerformed

    public void loadOptionsFromConfig() {

        tabsSingleFileChkBx.setSelected(config.isSingleFileTabEnabled());
        tabsStandaloneChkBx.setSelected(config.isStandaloneTabEnabled());
        tabsDirectoryChkBx.setSelected(config.isDirectoryTabEnabled());
        tabsXSLTSandboxChkBx.setSelected(config.isXsltSandboxTabEnabled());
        tabsXSDSandboxChkBx.setSelected(config.isXsdSandboxTabEnabled());
        tabsXQuerySandboxChkBx.setSelected(config.isXquerySandboxTabEnabled());
        tabsValidationChkBx.setSelected(config.isValidationTabEnabled());
        tabsSchematronChkBx.setSelected(config.isSchematronTabEnabled());
        tabsBatchChkBx.setSelected(config.isBatchTabEnabled());
        
        cleanOutputFilesChkBox.setSelected(config.isCleanOutputFiles());
        useThisSuffixChkBox.setSelected(config.isUseSpecificSuffix());
        useThisSuffixTextField.setEnabled(config.isUseSpecificSuffix());
        useThisSuffixTextField.setText(config.getSpecificSuffix());
        allowedInputSuffixes.setText(config.getAllowedInputSuffixes());
        
        useCachingURIResolverChkBx.setSelected(config.isUseCachingURIResolver());
        useCachingEntityResolverChkBx.setSelected(config.isUseCachingEntityResolver());        
        localCacheTxtFld.setText(config.getLocalCacheDir());
        System.setProperty("xml.catalog.files", config.getLocalCacheDir());
        
        catalogTxtFld.setText(config.getCatalogPath());
        suppressCachingMessages.setSelected(config.isSuppressURIandEntityMessages());
        
        validationSaxonRadioButton.setSelected(config.isValidationSaxon());
        validationXercesRadioButton.setSelected(config.isValidationXerces());
        validationXSD1dot0RadioBttn.setSelected(config.getSchemaVersion().equals(SchemaVersion.ONE_DOT_ZERO));
        validationXSD1dot1RadioBttn.setSelected(config.getSchemaVersion().equals(SchemaVersion.ONE_DOT_ONE));
        
        optionsMTSpinner.setValue(config.getThreadPoolSize());
        
        performAvgTimingChkBx.setSelected(config.isRunRepeatedly());
        repeatTransformSpinner.setValue(config.getNumberOfTimesToRepeatTask());
        ignoreTimesSpinner.setValue(config.getNumberOfTasksToIgnore());
    
        lexevEnableChkBx.setSelected(config.isUseLexEv());
        toggleLexevEnabled(config.isUseLexEv());
        lexevCdataChkBk.setSelected(config.isLexevCdata());
        lexevEntityRefChkBx.setSelected(config.isLexevEntityRef());
        lexevDoctypeChkBx.setSelected(config.isLexevDoctype());
        lexevDTDEntities.setSelected(config.isLexevDTDEntities());
        lexevCommentsChkBx.setSelected(config.isLexevComments());
    }
    
    private void saveOptionsInConfig() {             
        config.setAllowedInputSuffixes(allowedInputSuffixes.getText());
        config.setSpecificSuffix(useThisSuffixTextField.getText());
        config.setLocalCacheDir(localCacheTxtFld.getText());
        config.setThreadPoolSize((Integer)optionsMTSpinner.getValue());
        config.setCatalogPath(catalogTxtFld.getText());
        System.setProperty("xml.catalog.files", catalogTxtFld.getText());
    }
    
    private void doneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneBtnActionPerformed
        saveOptionsInConfig();
        //tabbedView.setTabVibilities();
        setVisible(false);
    }//GEN-LAST:event_doneBtnActionPerformed

private void tabsSingleFileChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsSingleFileChkBxActionPerformed
    config.setSingleFileTabEnabled(tabsSingleFileChkBx.isSelected());
}//GEN-LAST:event_tabsSingleFileChkBxActionPerformed

private void tabsDirectoryChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsDirectoryChkBxActionPerformed
    config.setDirectoryTabEnabled(tabsDirectoryChkBx.isSelected());
}//GEN-LAST:event_tabsDirectoryChkBxActionPerformed

private void tabsStandaloneChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsStandaloneChkBxActionPerformed
    config.setStandaloneTabEnabled(tabsStandaloneChkBx.isSelected());
}//GEN-LAST:event_tabsStandaloneChkBxActionPerformed

private void tabsBatchChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsBatchChkBxActionPerformed
    config.setBatchTabEnabled(tabsBatchChkBx.isSelected());
}//GEN-LAST:event_tabsBatchChkBxActionPerformed

private void tabsXSLTSandboxChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsXSLTSandboxChkBxActionPerformed
    config.setXsltSandboxTabEnabled(tabsXSLTSandboxChkBx.isSelected());      
}//GEN-LAST:event_tabsXSLTSandboxChkBxActionPerformed

private void tabsXSDSandboxChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsXSDSandboxChkBxActionPerformed
    config.setXsdSandboxTabEnabled(tabsXSDSandboxChkBx.isSelected());    
}//GEN-LAST:event_tabsXSDSandboxChkBxActionPerformed

private void tabsXQuerySandboxChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsXQuerySandboxChkBxActionPerformed
    config.setXquerySandboxTabEnabled(tabsXQuerySandboxChkBx.isSelected());
}//GEN-LAST:event_tabsXQuerySandboxChkBxActionPerformed

private void tabsValidationChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsValidationChkBxActionPerformed
    config.setValidationTabEnabled(tabsValidationChkBx.isSelected());
}//GEN-LAST:event_tabsValidationChkBxActionPerformed

private void tabsSchematronChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabsSchematronChkBxActionPerformed
    config.setSchematronTabEnabled(tabsSchematronChkBx.isSelected());
}//GEN-LAST:event_tabsSchematronChkBxActionPerformed

private void validationXSD1dot0RadioBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validationXSD1dot0RadioBttnActionPerformed
    config.setSchemaVersion(SchemaVersion.ONE_DOT_ZERO);
}//GEN-LAST:event_validationXSD1dot0RadioBttnActionPerformed

private void validationXSD1dot1RadioBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validationXSD1dot1RadioBttnActionPerformed
    config.setSchemaVersion(SchemaVersion.ONE_DOT_ONE);
}//GEN-LAST:event_validationXSD1dot1RadioBttnActionPerformed

private void lexevEnableChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexevEnableChkBxActionPerformed
    config.setUseLexEv(lexevEnableChkBx.isSelected());
    
    toggleLexevEnabled(lexevEnableChkBx.isSelected());
}//GEN-LAST:event_lexevEnableChkBxActionPerformed

private void toggleLexevEnabled(boolean toggle) {
    lexevCdataChkBk.setEnabled(toggle);    
    lexevEntityRefChkBx.setEnabled(toggle);
    lexevDoctypeChkBx.setEnabled(toggle);
    lexevCommentsChkBx.setEnabled(toggle);
    lexevDTDEntities.setEnabled(toggle);
}

private void lexevWebsiteLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lexevWebsiteLblMouseClicked
    BrowserLauncher.openURL("http://andrewjwelch.com/lexev/");
}//GEN-LAST:event_lexevWebsiteLblMouseClicked

private void lexevCdataChkBkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexevCdataChkBkActionPerformed
    config.setLexevCdata(lexevCdataChkBk.isSelected());
}//GEN-LAST:event_lexevCdataChkBkActionPerformed

private void lexevEntityRefChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexevEntityRefChkBxActionPerformed
    config.setLexevEntityRef(lexevEntityRefChkBx.isSelected());
}//GEN-LAST:event_lexevEntityRefChkBxActionPerformed

private void lexevDoctypeChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexevDoctypeChkBxActionPerformed
    config.setLexevDoctype(lexevDoctypeChkBx.isSelected());
}//GEN-LAST:event_lexevDoctypeChkBxActionPerformed

private void lexevCommentsChkBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexevCommentsChkBxActionPerformed
    config.setLexevComments(lexevCommentsChkBx.isSelected());
}//GEN-LAST:event_lexevCommentsChkBxActionPerformed

private void lexevDTDEntitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexevDTDEntitiesActionPerformed
    config.setLexevDTDEntities(lexevDTDEntities.isSelected());
}//GEN-LAST:event_lexevDTDEntitiesActionPerformed

private void catalogFileChooserBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catalogFileChooserBttnActionPerformed
    catalogTxtFld.setText(openFileChooser(catalogTxtFld, false));
}//GEN-LAST:event_catalogFileChooserBttnActionPerformed

private void catalogTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catalogTxtFldActionPerformed
    
}//GEN-LAST:event_catalogTxtFldActionPerformed

    public void setCleanOutputFilesChkBoxSelected(boolean selected) {
        this.cleanOutputFilesChkBox.setSelected(selected);
    }
    
    public void setUseThisSuffixSelected(boolean selected) {
        this.useThisSuffixChkBox.setSelected(selected);
    }
       
    public void setSuffixToUse(String text) {
        useThisSuffixTextField.setText(text);
    }
       
    public void setUseCachingURIResolver(boolean enable) {
        useCachingURIResolverChkBx.setSelected(enable);
    }
    
    public void setUseCachingEntityResolver(boolean enable) {
        useCachingEntityResolverChkBx.setSelected(enable);
    }
       
    public void setAllowedInputSuffixes(String suffixes) {
        allowedInputSuffixes.setText(suffixes);
    }
    
    public String getAllowedInputSuffixes() {
        return allowedInputSuffixes.getText();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField allowedInputSuffixes;
    private javax.swing.JButton catalogFileChooserBttn;
    private javax.swing.JTextField catalogTxtFld;
    private javax.swing.JCheckBox cleanOutputFilesChkBox;
    private javax.swing.JButton doneBtn;
    private javax.swing.JSpinner ignoreTimesSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox lexevCdataChkBk;
    private javax.swing.JCheckBox lexevCommentsChkBx;
    private javax.swing.JCheckBox lexevDTDEntities;
    private javax.swing.JCheckBox lexevDoctypeChkBx;
    private javax.swing.JCheckBox lexevEnableChkBx;
    private javax.swing.JCheckBox lexevEntityRefChkBx;
    private javax.swing.JPanel lexevPanel;
    private javax.swing.JLabel lexevWebsiteLbl;
    private javax.swing.JButton localCacheFileChooserBttn;
    private javax.swing.JTextField localCacheTxtFld;
    private javax.swing.JPanel optionsGeneralPanel;
    private javax.swing.JSpinner optionsMTSpinner;
    private javax.swing.JPanel optionsMultithreadedPanel;
    private javax.swing.JPanel optionsPerformance;
    private javax.swing.JPanel optionsResolversPanel;
    private javax.swing.JTabbedPane optionsTabbedPane;
    private javax.swing.JPanel optionsTabsPanel;
    private javax.swing.JPanel optionsValidationPanel;
    private javax.swing.JCheckBox performAvgTimingChkBx;
    private javax.swing.JSpinner repeatTransformSpinner;
    private javax.swing.ButtonGroup schemaAwareValidationButtonGroup;
    private javax.swing.ButtonGroup schemaVersionButtonGroup;
    private javax.swing.JCheckBox suppressCachingMessages;
    private javax.swing.JCheckBox tabsBatchChkBx;
    private javax.swing.JCheckBox tabsDirectoryChkBx;
    private javax.swing.JCheckBox tabsSchematronChkBx;
    private javax.swing.JCheckBox tabsSingleFileChkBx;
    private javax.swing.JCheckBox tabsStandaloneChkBx;
    private javax.swing.JCheckBox tabsValidationChkBx;
    private javax.swing.JCheckBox tabsXQuerySandboxChkBx;
    private javax.swing.JCheckBox tabsXSDSandboxChkBx;
    private javax.swing.JCheckBox tabsXSLTSandboxChkBx;
    private javax.swing.JCheckBox useCachingEntityResolverChkBx;
    private javax.swing.JCheckBox useCachingURIResolverChkBx;
    private javax.swing.JCheckBox useThisSuffixChkBox;
    private javax.swing.JTextField useThisSuffixTextField;
    private javax.swing.ButtonGroup validationButtonGroup;
    private javax.swing.JRadioButton validationSaxonRadioButton;
    private javax.swing.JRadioButton validationXSD1dot0RadioBttn;
    private javax.swing.JRadioButton validationXSD1dot1RadioBttn;
    private javax.swing.JRadioButton validationXercesRadioButton;
    // End of variables declaration//GEN-END:variables
    
}
